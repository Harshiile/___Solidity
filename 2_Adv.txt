Structs : Use for group different datatypes as single datatype

Signature :
    struct Person{
        string name,
        uint8 age,
        boolean isAbsent
    }

Initialization :
    Person memory newUser = Person({
        name:"Harshil",
        age:34,
        isAbsent:true
    })

___________________________________________________________________________________________________________


Enums

Signature :
    enum Status{
        None,
        Pending,
        Dispatching,
        Completed
    }

Initialization :
    Status status; // default "None"(First one)


___________________________________________________________________________________________________________



Mapping : Just like Map in JS

Signature :
    mapping(address => string) public myMap;    // (key,value)==>(address,string)

Set value : 
    myMap[_add] = val
    
Remove value :
    delete myMap[_add]


___________________________________________________________________________________________________________



Calling parent contract constructor
    i.e.
        contract C is A,B{
            constructor(string calldata _name) A(_name) B(_name) {} // Execution order : A->B->C
        }
        
        contract C is B,A{
            constructor(string calldata _name) A(_name) B(_name) {} // Execution order : B->A->C
        }

        // Order of execution of constructor don't depends on how you called parent contracts constructor
        // It's depends on order of inheritance of parent contract using "is" keyword



___________________________________________________________________________________________________________



Events : Emitted from smart contracts which generelly used by frontend side

    Signature : 
        Create the Event : event EventName(...parameters)
        Emit the Event : emit EventName(...parameters)

    i.e.
        1. event userAdded(uint128 indexed user_id,string memory username);
            // here "indexed", filter the data faster just like index in Database
        2. emit userAdded(235687922,"Harshil");